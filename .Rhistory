varImpOverall <- rbind(varImp(rfBelt)$importance, varImp(rfArm)$importance, varImp(rfDumbell)$importance, varImp(rfForearm)$importance)
library(knitr); library(caret); library(randomForest); library(gbm);
library(party);library(ElemStatLearn); library(xtable);
library(MASS);library(plyr); library(survival); library(splines);
setwd("~/GitHub/pml")
training <- read.csv("~/GitHub/pml/pml-training.csv")
testing <- read.csv("~/GitHub/pml/pml-testing.csv")
allColumns <- colnames(training)
# id columns that are not NA in testing data set
availColumns <- cbind(colnames(training),apply(testing, 2, max))
availColumns <- availColumns[is.na(availColumns[,2])==FALSE ,1]
availTrain <- training[, cbind(availColumns)[-c(1,3:6)]]
availTest <- testing[, colnames(testing) %in% colnames(availTrain)]
trainRows <- nrow(availTrain)
wleVariables <- matrix(rep("", 52), nrow=13, ncol = 4)
wleVariables[,1] <- colnames(availTrain)[3:15]
wleVariables[,2] <- colnames(availTrain)[16:28]
wleVariables[,3] <- colnames(availTrain)[29:41]
wleVariables[,4] <- colnames(availTrain)[42:54]
colnames(wleVariables) <- c("Belt", "Arm", "Dumbbells", "Forearm")
set.seed(80302)
subRows1 <- sample(1:trainRows, trainRows/5)
subSet1 <- availTrain[subRows1,]
subRows2 <- sample((1:trainRows)[!(row(availTrain)[,1] %in% subRows1)], (trainRows - length(subRows1))/4)
subSet2 <- availTrain[subRows2,]
subRows3 <- sample((1:trainRows)[!(row(availTrain)[,1] %in% c(subRows1, subRows2))], (trainRows - length(subRows1) - length(subRows2))/3)
subSet3 <- availTrain[subRows3,]
subRows4 <- sample((1:trainRows)[!(row(availTrain)[,1] %in% c(subRows1, subRows2,subRows3))], (trainRows - length(subRows1) - length(subRows2) - length(subRows3))/2)
subSet4 <- availTrain[subRows4,]
subSet5 <- availTrain[(1:trainRows)[!(row(availTrain)[,1] %in% c(subRows1, subRows2,subRows3,subRows4))],]
library(xtable)
xtab1 <- xtable(wleVariables)
print(xtab1, type = "html", include.rownames = FALSE)
rfTrain$finalModel$confusion
colnames(availTrain) %in% importantVariables2
varImp(rfTrain)
library(caret)
confusionMatrix(predict(rfImportant, subSet2), subSet2$classe)
confusionMatrix(predict(rfImportant, subSet3), subSet3$classe)
confusionMatrix(predict(rfImportant, subSet4), subSet4$classe)
confusionMatrix(predict(rfImportant, subSet5), subSet5$classe)
rfTrain
rfTrain2
varImp(rfTrain)
varImp(rfTrain2)
