endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = availTrain, ntree = 10,type="prob")
predictionMatrix <- predict(rfA,newdata=availTest,type="prob")
interimMatrix[, beginCol:endCol] <- predictionMatrix
rm(rfA)
interimMatrix
}
}
rfApred <- rfLoop(testRows, predictions)
rfLoop <- function(testRows, predictions){
for (i in 1:10){
interimMatrix <- matrix(rep(0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = availTrain, ntree = 10,type="prob")
predictionMatrix <- predict(rfA,newdata=availTest,type="prob")
interimMatrix[, beginCol:endCol] <- predictionMatrix
rm(rfA)
return interimMatrix
}
}
rfLoop <- function(testRows, predictions){
for (i in 1:10){
interimMatrix <- matrix(rep(0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
predictionMatrix <- predict(rfA,newdata=availTest,type="prob")
interimMatrix[, beginCol:endCol] <- predictionMatrix
rm(rfA)
return interimMatrix
}
}
interimMatrix <- matrix(rep(0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
predictionMatrix <- predict(rfA,newdata=availTest,type="prob")
interimMatrix[, beginCol:endCol] <- predictionMatrix
rm(rfA)
return interimMatrix
interimMatrix
predictions <- 2
interimMatrix <- matrix(rep(0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
predictionMatrix <- predict(rfA,newdata=availTest,type="prob")
interimMatrix[, beginCol:endCol] <- predictionMatrix
rm(rfA)
interimMatrix
rfLoop <- function(testRows, predictions){
for (i in 1:predictions){
interimMatrix <- matrix(rep(0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
predictionMatrix <- predict(rfA,newdata=availTest,type="prob")
interimMatrix[, beginCol:endCol] <- predictionMatrix
rm(rfA)
interimMatrix
}
}
rfApred <- rfLoop(testRows, predictions)
predictions <- 2
testRows <- nrow(availTest)
predictionMatrix <- matrix(rep(0, 100), nrow = 20, ncol = 5)
rfApred <- matrix(rep(0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
rfLoop <- function(){
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
rm(rfA)
interimMatrix
}
}
rfApred <- rfLoop()
rfApred
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
rfApred[1:testRows, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
predict(rfA,newdata=availTest,type="prob")
predict(rfA,newdata=availTest,type="prob")[1:20, 1:5]
rfApred[1:testRows, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")[1:testRows, 1:5]
dim(predict(rfA,newdata=availTest,type="prob"))
typeof(predict(rfA,newdata=availTest,type="prob"))
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
rfApred[1:testRows, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[1:testRows, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
rm(rfA)
interimMatrix
}
}
rfLoop <- function(){
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[1:testRows, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
rm(rfA)
interimMatrix
}
}
rfApred <- rfLoop()
rfLoop()
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
rfLoop <- function(){
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[1:testRows, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
rm(rfA)
interimMatrix
}
}
rfLoop()
rfApred
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
rfLoop <- function(){
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
}
rfLoop()
rfApred[, beginCol:endCol] <- matrix(predict(rfA,newdata=availTest,type="prob"),nrow = testRows, nCol = 5)
rfApred[, beginCol:endCol] <- matrix(predict(rfA,newdata=availTest,type="prob"),nrow = testRows, ncol = 5)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- matrix(predict(rfA,newdata=availTest,type="prob"),nrow = testRows, ncol = 5)
nextPredictions <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
nextPredictions$predicted
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
predict(rfA,newdata=availTest,type="prob")
str(predict(rfA,newdata=availTest,type="prob"))
predict(rfA,newdata=availTest,type="prob")[,1]
predict(rfA,newdata=availTest,type="prob")[,1:5]
str(rfApred)
rfApred[, 1:5] <- predict(rfA,newdata=availTest,type="prob")[,1:5]
rfApred
rfLoop <- function(){
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
}
rfApred
predictions <- 5
testRows <- nrow(availTest)
predictionMatrix <- matrix(rep(0, 100), nrow = 20, ncol = 5)
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
rfLoop <- function(){
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
}
rfLoop()
rfApred
rm(rfApred)
rfLoop <- function(){
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
}
rfLoop()
rfLoop <- function(testRows,predictions,trainRows,availTrain){
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
}
rfLoop(testRows,predictions,trainRows,availTrain)
rfLoop(20,2,19622,availTrain)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
rfApred
predictions <- 100
rm(rfApred)
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 10,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
rfApred
rfAmean <- matrix(rep(0, 100), nrow = 20, ncol = 5)
predCols <- 5*(1:100)-5
for (i in 1:5){
predCols <- 5*(1:100)-5 + i
rfAmean[, i] <- apply(rfApred[, predCols], 1, mean)
}
rfAmean
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 20,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
rfApred
rfAmean <- matrix(rep(0, 100), nrow = 20, ncol = 5)
for (i in 1:5){
predCols <- 5*(1:100)-5 + i
rfAmean[, i] <- apply(rfApred[, predCols], 1, mean)
}
rfAmean
rfAmean <- matrix(rep(0, 100), nrow = 20, ncol = 5)
predCols <- 5*(1:100)-5 + i
apply(rfApred[, predCols], 1, mean)
apply(rfApred[, predCols-4], 1, mean)
rfAmean <- matrix(rep(0.0, predictions), nrow = 20, ncol = 5)
for (j in 1:5){
predCols <- 5*(1:predictions)-5 + j
rfAmean[, j] <- apply(rfApred[, predCols], 1, mean)
}
apply(rfApred[, predCols-4], 1, mean)
rfAmean
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=1000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 100,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
rfApred
rfAmean <- matrix(rep(0.0, predictions), nrow = 20, ncol = 5)
for (j in 1:5){
predCols <- 5*(1:predictions)-5 + j
rfAmean[, j] <- apply(rfApred[, predCols], 1, mean)
}
rfAmean
rfApred <- matrix(rep(0.0,testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=5000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 100,type="prob")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="prob")
}
rfAmean <- matrix(rep(0.0, predictions), nrow = 20, ncol = 5)
for (j in 1:5){
predCols <- 5*(1:predictions)-5 + j
rfAmean[, j] <- apply(rfApred[, predCols], 1, mean)
}
rfAmean
?randomForest
rfApred <- matrix(rep("",testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=5000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(classe ~ . , data = trainSample, ntree = 100,type="class")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="class")
}
rfApred
rfApred <- matrix(rep("",testRows*5*predictions),nrow=testRows,ncol=5*predictions)
for (i in 1:predictions){
endCol <- 5*i
beginCol <- endCol - 4
set.seed(i)
sample.split <- sample(1:trainRows,size=5000,replace=F)
trainSample <- availTrain[sample.split,]
rfA <- randomForest(as.factor(classe) ~ . , data = trainSample, ntree = 100,type="class")
rfApred[, beginCol:endCol] <- predict(rfA,newdata=availTest,type="class")
}
rfApred
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
?to.monthly
mGoog <- to.monthly(GOOG,yearmon)
mGoog <- to.monthly(GOOG)
str(GOOG)
mGoog <- to.monthly(GOOG,indexAt='yearmon')
to.monthly(GOOG)
mGoog <- to.period(GOOG,period = 'months',
k = 1,
indexAt,
name=NULL,
OHLC = TRUE,
...)
mGoog <- to.period(GOOG,period = 'months',k = 1, indexAt, name=NULL, OHLC = TRUE)
mGoog <- to.period(GOOG,period = 'months',k = 1, indexAt='yearmon', name=NULL, OHLC = TRUE)
mGoog <- to.monthly(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
str(GOOG)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- data(vowel.train)
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
mod1 <- train(y ~.,method="rf",data=training)
library(ElemStatLearn);library(caret);library(gbm)
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
mod1 <- train(y ~.,method="rf",data=training)
mod2 <- train(wage ~.,method="gbm",data=training)
mod2 <- train(y ~.,method="gbm",data=training)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
qplot(pred1,pred2,colour=y,data=testing)
?confusionMatrix
confusionMatrix(pred1, testing$y)
confusionMatrix(pred2, testing$y)
confusionMatrix(pred1, testing$y)
confusionMatrix(pred2, testing$y)
str(confusionMatrix(pred1, testing$y))
confusionMatrix(pred1, testing$y)$overall
confusionMatrix(pred2, testing$y)$overall
confusionMatrix(pred1, pred2)$overall
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
mod1 <- train(diagnosis ~.,method="rf",data=training)
mod2 <- train(diagnosis ~.,method="gbm",data=training)
mod3 <- train(diagnosis ~.,method="lda",data=training)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing);
pred3 <- predict(mod3,testing)
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(pred1, testing$diagnosis)$overall
confusionMatrix(pred1, testing$diagnosis)$overall$Accuracy
confusionMatrix(pred1, testing$diagnosis)$overall.Accuracy
confusionMatrix(pred1, testing$diagnosis)$overall[1]
confusionMatrix(pred2, testing$diagnosis)$overall[1]
confusionMatrix(pred3, testing$diagnosis)$overall[1]
confusionMatrix(combModFit, testing$diagnosis)$overall[1]
confusionMatrix(combModFit, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(62433)
mod1 <- train(diagnosis ~.,method="rf",data=training)
mod2 <- train(diagnosis ~.,method="gbm",data=training)
mod3 <- train(diagnosis ~.,method="lda",data=training)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing);
pred3 <- predict(mod3,testing)
confusionMatrix(pred1, testing$diagnosis)$overall[1]
confusionMatrix(pred2, testing$diagnosis)$overall[1]
confusionMatrix(pred3, testing$diagnosis)$overall[1]
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233
)
library(lars)
install.packages("lars")
library(lars)
lasso.fit <- lars(as.matrix(training[,-9]), training$CompressiveStrength, type="lasso", trace=TRUE)
?plot.enet
plot(lasso.fit, breaks=FALSE)
legend("topleft", covnames, pch=8, lty=1:length(covnames), col=1:length(covnames))
covnames <- names(training[,-9])
legend("topleft", covnames, pch=8, lty=1:length(covnames), col=1:length(covnames))
lasso.cv <- cv.lars(as.matrix(x), y, K=10, type="lasso", trace=TRUE)
lasso.cv <- cv.lars(as.matrix(training[,-9]), training$CompressiveStrength, K=10, type="lasso", trace=TRUE)
plot(lasso.fit, breaks=FALSE)
legend("topleft", covnames, pch=8, lty=1:length(covnames), col=1:length(covnames))
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
setwd("~/GitHub/pml")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.1")
bats1 <- bats(training$visitsTumblr)
bats1 <- bats(tstrain)
tstest <- ts(testing$visitsTumblr)
predBats1 <- forecast.bats(tstest, level = .95)
predBats1 <- forecast.bats(bats1, h = 235, level = .95)
predBats1
names(predBats1)
predHigh <- predBats1$lower > tstest
predHigh <- 1*(predBats1$lower > tstest)
predAccurate <- 1*(predBats1$lower <= tstest)*(predBats1$higher >= tstest)
predLowOK <- 1*(predBats1$lower <= tstest)
predHighOK <- 1*(predBats1$higher >= tstest)
predAccurate <- 1*(predBats1$lower <= tstest)*(predBats1$upper >= tstest)
mean(predAccurate)
predAccurate <- 1*(predBats1$lower <= tstest)
mean(predAccurate)
plot(predBats1$lower)
plot(predBats1$upper)
plot(predBats1$lower)
plot(predBats1$upper)
plot(tstest)
